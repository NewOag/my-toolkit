name: Release Tauri Multiplatform

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    name: Build - ${{ matrix.target }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            platform: windows-latest
            package_ext: msi
            bundle_dir: msi
          - target: aarch64-apple-darwin
            platform: macos-latest
            package_ext: dmg
            bundle_dir: dmg
          - target: x86_64-apple-darwin
            platform: macos-latest
            package_ext: dmg
            bundle_dir: dmg
          - target: x86_64-unknown-linux-gnu
            platform: ubuntu-latest
            package_ext: deb
            bundle_dir: deb
    
    runs-on: ${{ matrix.platform }}
    env:
      CARGO_TERM_COLOR: always
      
    steps:
      - uses: actions/checkout@v4
      
      # 设置环境
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      # 平台特定依赖
      - name: Install Linux dependencies
        if: startsWith(matrix.target, 'x86_64-unknown-linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install macOS dependencies
        if: contains(matrix.target, 'apple-darwin')
        run: brew install create-dmg
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      # 缓存依赖
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # 安装项目依赖
      - name: Install dependencies
        run: npm ci

      # 安装 Tauri CLI
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      # 构建应用
      - name: Build application
        run: |
          npm run build
          # 重命名包文件
          find src-tauri/target/release/bundle -type f -name "*.${{ matrix.package_ext }}" | while read file; do
            new_name="${file%.*}-${{ matrix.target }}.${file##*.}"
            mv "$file" "$new_name"
          done
        env:
          CI: false

      # 签名配置 (示例)
      - name: Sign macOS app
        if: contains(matrix.target, 'apple-darwin')
        run: |
          echo "Add your signing commands here"
          # 实际签名命令示例:
          # export APPLE_ID=${{ secrets.APPLE_ID }}
          # export APPLE_PASSWORD=${{ secrets.APPLE_PASSWORD }}
          # ./sign.sh
        env:
          SIGNING_ENABLED: ${{ secrets.APPLE_ID != '' }}

      # 上传制品
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-bundle
          path: |
            src-tauri/target/release/bundle/${{ matrix.bundle_dir }}/*
            !src-tauri/target/release/**/*.rlib
          retention-days: 7

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Upload to Release
        run: |
          for file in artifacts/*/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              filename=$(basename "$file")
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                "${{ needs.create-release.outputs.release_upload_url }}?name=${filename}"
            fi
          done
